const VkBot = require('node-vk-bot-api')
const Api = require('node-vk-bot-api/lib/api');
const Markup = require('node-vk-bot-api/lib/Markup')
const Scene = require('node-vk-bot-api/lib/Scene')
const Stage = require('node-vk-bot-api/lib/Stage')
const Session = require('node-vk-bot-api/lib/session')
const Datastore = require('nedb-promise')
const TOKEN = require('./token').TOKEN

const db = {};
db.customers = Datastore({ filename: 'db/customers.db' });
db.schedule = Datastore({ filename: 'db/schedule.db' });

db.customers.loadDatabase();
db.schedule.loadDatabase();

const bot = new VkBot(TOKEN);

const sceneShowRecords = new Scene('–ó–∞–ø–∏—Å–∏',
  async (ctx)=> {
    ctx.scene.enter('–ü—Ä–∏–≤–µ—Ç');
    const records = await db.schedule.find({ idVk: ctx.message.from_id, date: { $gte: new Date()} })
    if(records.length > 0){
      let str = '–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n';
      for (let i = 0; i < records.length; i++) {
        str += `${i+1}) ${getDateString(records[i].date)}\n` 
      }
      ctx.reply(str);
    } else {
      ctx.reply('–ü–æ–∫–∞ —É —Ç–µ–±—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π\n–≠—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å üòΩ');
    }
  }
);

const sceneRecord = new Scene('–ó–∞–ø–∏—Å—å',

  async (ctx) => {
    ctx.scene.next();

    const dates = await getDates(new Date());
    const datesString = getDateStrings(dates);

    ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:`, null, Markup
      .keyboard([
        [
          Markup.button({ action: { type: 'text', label: datesString[0], payload: (+dates[0]).toString() }, color: 'positive' }), 
          Markup.button({ action: { type: 'text', label: datesString[1], payload: (+dates[1]).toString() }, color: 'positive' })
        ],
        [
          Markup.button({ action: { type: 'text', label: datesString[2], payload: (+dates[2]).toString() }, color: 'positive' }), 
          Markup.button({ action: { type: 'text', label: datesString[3], payload: (+dates[3]).toString() }, color: 'positive' })
        ],
        [
          Markup.button({ action: { type: 'text', label: datesString[4], payload: (+dates[4]).toString() }, color: 'positive' }),
          Markup.button({ action: { type: 'text', label: datesString[5], payload: (+dates[5]).toString() }, color: 'positive' })
        ],
        [
          Markup.button('–û—Ç–º–µ–Ω–∞', 'negative')
        ]
      ])
      .oneTime());
  },

  (ctx) => {
    if (ctx.message.text !== '–û—Ç–º–µ–Ω–∞' && ctx.message.payload) {
      db.schedule.insert({ idVk: ctx.message.from_id, servise: '', date: new Date(+ctx.message.payload), status: false });

      ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', null, Markup
        .keyboard([
          [Markup.button('–ú–∞–Ω–∏–∫—é—Ä', 'positive'), Markup.button('–ü–µ–¥–∏–∫—é—Ä', 'positive')],
          [Markup.button('–û—Ç–º–µ–Ω–∞', 'negative')]
        ])
        .oneTime());

      ctx.scene.next();
    } else {
      ctx.scene.enter('–ó–∞–ø–∏—Å—å', [3]);
    }
  },

  async (ctx) => {
    if (ctx.message.text == '–ú–∞–Ω–∏–∫—é—Ä' || ctx.message.text == '–ü–µ–¥–∏–∫—é—Ä') {

      db.schedule.update({ idVk: ctx.message.from_id, servise: '' }, { $set: { servise: ctx.message.text } });

      ctx.reply('(–°–µ—Ä –∫–æ—Ç –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π)', null, null, 6334);

      setTimeout(() => {
        bot.sendMessage(ctx.message.from_id, '–£—Å–ø–µ—à–Ω–æ!\n–ó–∞ –¥–µ–Ω—å –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!');
      }, 30);

      ctx.scene.enter('–ü—Ä–∏–≤–µ—Ç');
    } else {
      db.schedule.remove({ idVk: ctx.message.from_id, servise: '' });
      ctx.scene.enter('–ó–∞–ø–∏—Å—å', [3]);
    }
  },

  (ctx) => {
    ctx.scene.enter('–ü—Ä–∏–≤–µ—Ç');
  }
)

const sceneHello = new Scene('–ü—Ä–∏–≤–µ—Ç',
  (ctx) => {
    ctx.scene.next();
    ctx.reply('–Ø –±–æ—Ç –ü—É—Ä—á–∏–∫‚ú®\n–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≥–æ—Ç–æ—á–∫–∏üíÖüèª', null, Markup
      .keyboard([
        [Markup.button('–ú–æ–∏ –∑–∞–ø–∏—Å–∏')],
        [Markup.button('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≥–æ—Ç–æ—á–∫–∏üíÖüèª', 'primary')]
      ])
      .oneTime());
  },
  (ctx) => {
    if (ctx.message.text === '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≥–æ—Ç–æ—á–∫–∏üíÖüèª') {
      ctx.scene.enter('–ó–∞–ø–∏—Å—å');
    }
    else if (ctx.message.text === '–ú–æ–∏ –∑–∞–ø–∏—Å–∏') {
      ctx.scene.enter('–ó–∞–ø–∏—Å–∏');
    }
    else {
      ctx.scene.enter('–ü—Ä–∏–≤–µ—Ç', [0]);
    }
  }
)

const session = new Session()
const stage = new Stage(sceneRecord,sceneShowRecords, sceneHello)
bot.use(session.middleware())
bot.use(stage.middleware())

bot.command('–ù–∞—á–∞—Ç—å', (ctx) => {
  ctx.scene.enter('–ü—Ä–∏–≤–µ—Ç');
})

bot.on((ctx) => {
  ctx.scene.enter('–ü—Ä–∏–≤–µ—Ç');
})

function getWeekDay(date) {
  date = date || new Date();
  const days = ['–íc', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
  const day = date.getDay();

  return days[day];
}

function getMonthString(date) {
  date = date || new Date();
  const months = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'];
  const month = date.getMonth();

  return months[month];
}

async function getDates(date) {
  const dates = [];
  const curr = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1, 10, 0);
  dates.push(await getNextDate(curr, true));

  for (let i = 1; i < 6; i++) {
    dates.push(await getNextDate(dates[dates.length - 1]));
  }

  return dates;
}

function getDateStrings(dates) {
  return dates.map(date => getDateString(date));
}

function getDateString(date) {
  return `${getWeekDay(date)} ${date.getDate()} ${getMonthString(date)} ${date.getHours()}:${date.getMinutes()}0`;
}

async function getNextDate(date, isStart = false) {
  let next = date;
  if (next.getDay() == 0) {
    next = new Date(next.getFullYear(), next.getMonth(), next.getDate() + 1, 10, 0);
    isStart = true;
  }

  if (next.getDay() == 6) {
    next = new Date(next.getFullYear(), next.getMonth(), next.getDate() + 2, 10, 0);
    isStart = true;
  }

  if (!isStart) {
    if (next.getHours() == 10) {
      next = new Date(next.getFullYear(), next.getMonth(), next.getDate(), 14, 0);
    }

    else if (next.getHours() == 14) {
      next = new Date(next.getFullYear(), next.getMonth(), next.getDate() + 1, 10, 0);
    }
  }

  let docs = await db.schedule.find({ date: next });

  if (docs.length == 0) {
    return next;

  } else {
    return getNextDate(next);
  }
}

/**
 * –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –∑–∞–ø–∏—Å–∏
 * @param {number} beforeDays - –∑–∞ –∫–∞–∫–æ–µ –∫–æ–ª-–≤–æ –¥–Ω–µ–π –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å
 */
async function notifyUsers(beforeDays){

  const now = new Date();
  let users = await db.schedule.find({ status: false, date: { $lte: new Date(now.getFullYear(), now.getMonth(), now.getDate() + beforeDays, now.getHours(), now.getMinutes())} })

  if(users.length > 0){
    let vkUser;
    users.forEach(async user => {
      vkUser = (await Api('users.get', {
        user_ids: user.idVk,
        access_token: TOKEN,
      })).response[0];

      bot.sendMessage(user.idVk,`–ü—Ä–∏–≤–µ—Ç, ${vkUser.first_name}!üíÖüèª\n–•–æ—á—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –∑–∞–ø–∏—Å—å:\n${getDateString(user.date)}\n\n–•–æ—Ä–æ—à–∏—Ö –Ω–æ–≥–æ—Ç–æ—á–∫–æ–≤!üíñ `);
      db.schedule.update({ idVk: user.idVk, date: user.date }, { $set: { status: true } });
    });
  }
}

bot.startPolling(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');

  //–æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  //notifyUsers(1);

  //–∑–∞–¥–∞—á–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
  //setInterval(notifyUsers.bind(null, 1), 60*60*1000);
  //setInterval(notifyUsers.bind(null, 10), 5000);
})
